-- Create a PL/SQL package
CREATE OR REPLACE PACKAGE HR_PACKAGE AS
  -- Procedure to add a new employee
  PROCEDURE add_employee(
    p_employee_id   IN NUMBER,
    p_employee_name IN VARCHAR2,
    p_salary        IN NUMBER
  );

  -- Function to calculate annual bonus
  FUNCTION calculate_annual_bonus(
    p_salary IN NUMBER
  ) RETURN NUMBER;
  
END HR_PACKAGE;
/

-- Create the package body
CREATE OR REPLACE PACKAGE BODY HR_PACKAGE AS
  -- Procedure to add a new employee
  PROCEDURE add_employee(
    p_employee_id   IN NUMBER,
    p_employee_name IN VARCHAR2,
    p_salary        IN NUMBER
  ) IS
  BEGIN
    INSERT INTO employees (employee_id, employee_name, salary)
    VALUES (p_employee_id, p_employee_name, p_salary);
  END add_employee;

  -- Function to calculate annual bonus
  FUNCTION calculate_annual_bonus(
    p_salary IN NUMBER
  ) RETURN NUMBER IS
    v_bonus_percentage NUMBER := 0.1; -- 10% bonus
  BEGIN
    RETURN p_salary * v_bonus_percentage;
  END calculate_annual_bonus;
  
END HR_PACKAGE;
/



CREATE OR REPLACE TRIGGER trg_update_last_modified
BEFORE UPDATE ON your_table_name
FOR EACH ROW
BEGIN
  -- Update the last_modified column with the current timestamp
  :NEW.last_modified := SYSTIMESTAMP;
END;
/


-- Create a PL/SQL package
CREATE OR REPLACE PACKAGE HR_PACKAGE AS
  -- Procedure to update employee salary by 10%
  PROCEDURE update_salary(
    p_employee_id IN NUMBER,
    p_new_salary   OUT NUMBER
  );

  -- Function to calculate net salary after a 5% tax deduction
  FUNCTION calculate_net_salary(
    p_salary IN NUMBER
  ) RETURN NUMBER;
  
END HR_PACKAGE;
/




-- Create the package body
CREATE OR REPLACE PACKAGE BODY HR_PACKAGE AS
  -- Procedure to update employee salary by 10%
  PROCEDURE update_salary(
    p_employee_id IN NUMBER,
    p_new_salary   OUT NUMBER
  ) IS
    v_bonus_percentage NUMBER := 0.1; -- 10% bonus
    v_tax_percentage   NUMBER := 0.05; -- 5% tax
  BEGIN
    -- Assuming you have an employees table with a salary column
    UPDATE employees
    SET salary = salary * (1 + v_bonus_percentage)
    WHERE employee_id = p_employee_id
    RETURNING salary INTO p_new_salary;
  END update_salary;

  -- Function to calculate net salary after a 5% tax deduction
  FUNCTION calculate_net_salary(
    p_salary IN NUMBER
  ) RETURN NUMBER IS
    v_tax_percentage NUMBER := 0.05; -- 5% tax
    v_net_salary NUMBER;
  BEGIN
    v_net_salary := p_salary * (1 - v_tax_percentage);
    RETURN v_net_salary;
  END calculate_net_salary;
  
END HR_PACKAGE;
/


DECLARE
  v_column1 table_name.column1%TYPE; 
  v_column2 table_name.column2%TYPE; 
  
 
  CURSOR my_cursor IS
    SELECT column1, column2
    FROM table_name
    WHERE your_condition; 

BEGIN
  
  OPEN my_cursor;

 
  LOOP
    FETCH my_cursor INTO v_column1, v_column2;

   
    EXIT WHEN my_cursor%NOTFOUND;

  
    DBMS_OUTPUT.PUT_LINE('Column1: ' || v_column1 || ', Column2: ' || v_column2);
    
    

  END LOOP;

  
  CLOSE my_cursor;
  
END;
/
